package org.cell.froopyland_interface.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Bytes4;
import org.web3j.abi.datatypes.generated.Uint128;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.abi.datatypes.generated.Uint96;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tuples.generated.Tuple9;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.5.3.
 */
@SuppressWarnings("rawtypes")
public class BidFroopyLand extends Contract {
    public static final String BINARY = "";

    private static String librariesLinkedBinary;

    public static final String FUNC_DEFAULT_ADMIN_ROLE = "DEFAULT_ADMIN_ROLE";

    public static final String FUNC_GAME_CREATOR_ROLE = "GAME_CREATOR_ROLE";

    public static final String FUNC_GAME_END_DENY = "GAME_END_DENY";

    public static final String FUNC_ACCOUNTTOGAMEIDTOPERKEYHEIGHT1E18 = "accountToGameIdToPerKeyHeight1e18";

    public static final String FUNC_ACCOUNTTOGAMEIDTOREALIZEDBONUS = "accountToGameIdToRealizedBonus";

    public static final String FUNC_BASEKEYPRICE = "baseKeyPrice";

    public static final String FUNC_BIDLAND = "bidLand";

    public static final String FUNC_BIDROUNDINFO = "bidRoundInfo";

    public static final String FUNC_BUYKEYLIMIT = "buyKeyLimit";

    public static final String FUNC_CHECKANDUPDATELASTBIDID = "checkAndUpdateLastBidId";

    public static final String FUNC_CLAIMBONUS = "claimBonus";

    public static final String FUNC_CONVERTKEYTOTOKEN = "convertKeyToToken";

    public static final String FUNC_CONVERTERCONTRACT = "converterContract";

    public static final String FUNC_CREATEGAMEDIRECTLY = "createGameDirectly";

    public static final String FUNC_DEPOSITBIDTOKEN = "depositBidToken";

    public static final String FUNC_GAMESTARTDENY = "gameStartDeny";

    public static final String FUNC_GAMES = "games";

    public static final String FUNC_GETBIDSTATE = "getBidState";

    public static final String FUNC_GETBIDDERINFOOF = "getBidderInfoOf";

    public static final String FUNC_GETBIDSOF = "getBidsOf";

    public static final String FUNC_GETGAMEENDTIMECOUNTDOWNS = "getGameEndTimeCountDowns";

    public static final String FUNC_GETGAMEENDTIMESTAMPOFGAMEIDS = "getGameEndTimestampOfGameIds";

    public static final String FUNC_GETGAMEINFOOFGAMEIDS = "getGameInfoOfGameIds";

    public static final String FUNC_GETGAMESTATEOFGAMEIDS = "getGameStateOfGameIds";

    public static final String FUNC_GETKEYPRICE = "getKeyPrice";

    public static final String FUNC_GETNEXTROUNDGAMESTARTTIMESTAMP = "getNextRoundGameStartTimestamp";

    public static final String FUNC_GETPLAYERSTATEOFGAMEIDS = "getPlayerStateOfGameIds";

    public static final String FUNC_GETROLEADMIN = "getRoleAdmin";

    public static final String FUNC_GETTIMEBASEDCURRENTBIDID = "getTimeBasedCurrentBidId";

    public static final String FUNC_GETWITHDRAWABLETOKENAMOUNTOF = "getWithdrawableTokenAmountOf";

    public static final String FUNC_GRANTROLE = "grantRole";

    public static final String FUNC_HASROLE = "hasRole";

    public static final String FUNC_ISPAUSED = "isPaused";

    public static final String FUNC_KEEPBIDIDANDUPDATECYCLE = "keepBidIdAndUpdateCycle";

    public static final String FUNC_NEWGAME = "newGame";

    public static final String FUNC_NFTCONTRACTWHITELIST = "nftContractWhiteList";

    public static final String FUNC_ONERC721RECEIVED = "onERC721Received";

    public static final String FUNC_PURCHASEKEYOFGAMEID = "purchaseKeyOfGameId";

    public static final String FUNC_RENOUNCEROLE = "renounceRole";

    public static final String FUNC_RETRIEVENFT = "retrieveNft";

    public static final String FUNC_REVOKEROLE = "revokeRole";

    public static final String FUNC_SETBIAS = "setBias";

    public static final String FUNC_SETGAMESTARTDENY = "setGameStartDeny";

    public static final String FUNC_SETPAUSED = "setPaused";

    public static final String FUNC_SETWL = "setWL";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SWITCHWL = "switchWL";

    public static final String FUNC_SYSTOKENCONTRACT = "sysTokenContract";

    public static final String FUNC_SYSTOTALKEYMINTED = "sysTotalKeyMinted";

    public static final String FUNC_TOTALGAMES = "totalGames";

    public static final String FUNC_TOTALKEYMINTEDBIAS = "totalKeyMintedBias";

    public static final String FUNC_UPDATEBIDSTARTTIMEPOINT = "updateBidStartTimePoint";

    public static final String FUNC_UPDATECONVERTER = "updateConverter";

    public static final String FUNC_UPDATEVAULT = "updateVault";

    public static final String FUNC_USENFTCONTRACTWHITELIST = "useNftContractWhiteList";

    public static final String FUNC_VAULTCONTRACT = "vaultContract";

    public static final String FUNC_WITHDRAWBIDTOKEN = "withdrawBidToken";

    public static final String FUNC_WITHDRAWLASTPLAYERPRIZE = "withdrawLastplayerPrize";

    public static final String FUNC_WITHDRAWSALEREVENUE = "withdrawSaleRevenue";

    public static final Event CLAIMKEYBONUS_EVENT = new Event("ClaimKeyBonus", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event GAMECREATED_EVENT = new Event("GameCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event GAMEJOINED_EVENT = new Event("GameJoined", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event NEWBIDS_EVENT = new Event("NewBids", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event NFTRETRIEVED_EVENT = new Event("NftRetrieved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ROLEADMINCHANGED_EVENT = new Event("RoleAdminChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event ROLEGRANTED_EVENT = new Event("RoleGranted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ROLEREVOKED_EVENT = new Event("RoleRevoked", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event SETTLEBIDS_EVENT = new Event("SettleBids", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event WITHDRAWLASTPLAYERPRIZE_EVENT = new Event("WithdrawLastPlayerPrize", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event WITHDRAWSALEREVENUE_EVENT = new Event("WithdrawSaleRevenue", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected BidFroopyLand(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected BidFroopyLand(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected BidFroopyLand(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected BidFroopyLand(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ClaimKeyBonusEventResponse> getClaimKeyBonusEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(CLAIMKEYBONUS_EVENT, transactionReceipt);
        ArrayList<ClaimKeyBonusEventResponse> responses = new ArrayList<ClaimKeyBonusEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ClaimKeyBonusEventResponse typedResponse = new ClaimKeyBonusEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.GameId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.Player = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.bonusAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ClaimKeyBonusEventResponse getClaimKeyBonusEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(CLAIMKEYBONUS_EVENT, log);
        ClaimKeyBonusEventResponse typedResponse = new ClaimKeyBonusEventResponse();
        typedResponse.log = log;
        typedResponse.GameId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.Player = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.bonusAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ClaimKeyBonusEventResponse> claimKeyBonusEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getClaimKeyBonusEventFromLog(log));
    }

    public Flowable<ClaimKeyBonusEventResponse> claimKeyBonusEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CLAIMKEYBONUS_EVENT));
        return claimKeyBonusEventFlowable(filter);
    }

    public static List<GameCreatedEventResponse> getGameCreatedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(GAMECREATED_EVENT, transactionReceipt);
        ArrayList<GameCreatedEventResponse> responses = new ArrayList<GameCreatedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            GameCreatedEventResponse typedResponse = new GameCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.NftPrincipal = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.NftAddress = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.gameId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.nftId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static GameCreatedEventResponse getGameCreatedEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(GAMECREATED_EVENT, log);
        GameCreatedEventResponse typedResponse = new GameCreatedEventResponse();
        typedResponse.log = log;
        typedResponse.NftPrincipal = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.NftAddress = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.gameId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.nftId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<GameCreatedEventResponse> gameCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getGameCreatedEventFromLog(log));
    }

    public Flowable<GameCreatedEventResponse> gameCreatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(GAMECREATED_EVENT));
        return gameCreatedEventFlowable(filter);
    }

    public static List<GameJoinedEventResponse> getGameJoinedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(GAMEJOINED_EVENT, transactionReceipt);
        ArrayList<GameJoinedEventResponse> responses = new ArrayList<GameJoinedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            GameJoinedEventResponse typedResponse = new GameJoinedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.GameId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.Player = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._keyAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static GameJoinedEventResponse getGameJoinedEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(GAMEJOINED_EVENT, log);
        GameJoinedEventResponse typedResponse = new GameJoinedEventResponse();
        typedResponse.log = log;
        typedResponse.GameId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.Player = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse._keyAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<GameJoinedEventResponse> gameJoinedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getGameJoinedEventFromLog(log));
    }

    public Flowable<GameJoinedEventResponse> gameJoinedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(GAMEJOINED_EVENT));
        return gameJoinedEventFlowable(filter);
    }

    public static List<NewBidsEventResponse> getNewBidsEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(NEWBIDS_EVENT, transactionReceipt);
        ArrayList<NewBidsEventResponse> responses = new ArrayList<NewBidsEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            NewBidsEventResponse typedResponse = new NewBidsEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.Bidder = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.bidId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static NewBidsEventResponse getNewBidsEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(NEWBIDS_EVENT, log);
        NewBidsEventResponse typedResponse = new NewBidsEventResponse();
        typedResponse.log = log;
        typedResponse.Bidder = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.bidId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<NewBidsEventResponse> newBidsEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getNewBidsEventFromLog(log));
    }

    public Flowable<NewBidsEventResponse> newBidsEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWBIDS_EVENT));
        return newBidsEventFlowable(filter);
    }

    public static List<NftRetrievedEventResponse> getNftRetrievedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(NFTRETRIEVED_EVENT, transactionReceipt);
        ArrayList<NftRetrievedEventResponse> responses = new ArrayList<NftRetrievedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            NftRetrievedEventResponse typedResponse = new NftRetrievedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.RetrieveAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.gameId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static NftRetrievedEventResponse getNftRetrievedEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(NFTRETRIEVED_EVENT, log);
        NftRetrievedEventResponse typedResponse = new NftRetrievedEventResponse();
        typedResponse.log = log;
        typedResponse.RetrieveAddress = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.gameId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<NftRetrievedEventResponse> nftRetrievedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getNftRetrievedEventFromLog(log));
    }

    public Flowable<NftRetrievedEventResponse> nftRetrievedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NFTRETRIEVED_EVENT));
        return nftRetrievedEventFlowable(filter);
    }

    public static List<RoleAdminChangedEventResponse> getRoleAdminChangedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ROLEADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<RoleAdminChangedEventResponse> responses = new ArrayList<RoleAdminChangedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RoleAdminChangedEventResponse getRoleAdminChangedEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ROLEADMINCHANGED_EVENT, log);
        RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
        typedResponse.log = log;
        typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRoleAdminChangedEventFromLog(log));
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEADMINCHANGED_EVENT));
        return roleAdminChangedEventFlowable(filter);
    }

    public static List<RoleGrantedEventResponse> getRoleGrantedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ROLEGRANTED_EVENT, transactionReceipt);
        ArrayList<RoleGrantedEventResponse> responses = new ArrayList<RoleGrantedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RoleGrantedEventResponse getRoleGrantedEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ROLEGRANTED_EVENT, log);
        RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
        typedResponse.log = log;
        typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRoleGrantedEventFromLog(log));
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEGRANTED_EVENT));
        return roleGrantedEventFlowable(filter);
    }

    public static List<RoleRevokedEventResponse> getRoleRevokedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ROLEREVOKED_EVENT, transactionReceipt);
        ArrayList<RoleRevokedEventResponse> responses = new ArrayList<RoleRevokedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RoleRevokedEventResponse getRoleRevokedEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ROLEREVOKED_EVENT, log);
        RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
        typedResponse.log = log;
        typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRoleRevokedEventFromLog(log));
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEREVOKED_EVENT));
        return roleRevokedEventFlowable(filter);
    }

    public static List<SettleBidsEventResponse> getSettleBidsEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(SETTLEBIDS_EVENT, transactionReceipt);
        ArrayList<SettleBidsEventResponse> responses = new ArrayList<SettleBidsEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SettleBidsEventResponse typedResponse = new SettleBidsEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.BidWinner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.bidId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static SettleBidsEventResponse getSettleBidsEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(SETTLEBIDS_EVENT, log);
        SettleBidsEventResponse typedResponse = new SettleBidsEventResponse();
        typedResponse.log = log;
        typedResponse.BidWinner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.bidId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<SettleBidsEventResponse> settleBidsEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSettleBidsEventFromLog(log));
    }

    public Flowable<SettleBidsEventResponse> settleBidsEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETTLEBIDS_EVENT));
        return settleBidsEventFlowable(filter);
    }

    public static List<WithdrawLastPlayerPrizeEventResponse> getWithdrawLastPlayerPrizeEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(WITHDRAWLASTPLAYERPRIZE_EVENT, transactionReceipt);
        ArrayList<WithdrawLastPlayerPrizeEventResponse> responses = new ArrayList<WithdrawLastPlayerPrizeEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            WithdrawLastPlayerPrizeEventResponse typedResponse = new WithdrawLastPlayerPrizeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.Winner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.gameId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.prize = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static WithdrawLastPlayerPrizeEventResponse getWithdrawLastPlayerPrizeEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(WITHDRAWLASTPLAYERPRIZE_EVENT, log);
        WithdrawLastPlayerPrizeEventResponse typedResponse = new WithdrawLastPlayerPrizeEventResponse();
        typedResponse.log = log;
        typedResponse.Winner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.gameId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.prize = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<WithdrawLastPlayerPrizeEventResponse> withdrawLastPlayerPrizeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getWithdrawLastPlayerPrizeEventFromLog(log));
    }

    public Flowable<WithdrawLastPlayerPrizeEventResponse> withdrawLastPlayerPrizeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWLASTPLAYERPRIZE_EVENT));
        return withdrawLastPlayerPrizeEventFlowable(filter);
    }

    public static List<WithdrawSaleRevenueEventResponse> getWithdrawSaleRevenueEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(WITHDRAWSALEREVENUE_EVENT, transactionReceipt);
        ArrayList<WithdrawSaleRevenueEventResponse> responses = new ArrayList<WithdrawSaleRevenueEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            WithdrawSaleRevenueEventResponse typedResponse = new WithdrawSaleRevenueEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.Principal = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.gameId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.pureSalesRevenue = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static WithdrawSaleRevenueEventResponse getWithdrawSaleRevenueEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(WITHDRAWSALEREVENUE_EVENT, log);
        WithdrawSaleRevenueEventResponse typedResponse = new WithdrawSaleRevenueEventResponse();
        typedResponse.log = log;
        typedResponse.Principal = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.gameId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.pureSalesRevenue = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<WithdrawSaleRevenueEventResponse> withdrawSaleRevenueEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getWithdrawSaleRevenueEventFromLog(log));
    }

    public Flowable<WithdrawSaleRevenueEventResponse> withdrawSaleRevenueEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWSALEREVENUE_EVENT));
        return withdrawSaleRevenueEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> DEFAULT_ADMIN_ROLE() {
        final Function function = new Function(FUNC_DEFAULT_ADMIN_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> GAME_CREATOR_ROLE() {
        final Function function = new Function(FUNC_GAME_CREATOR_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<BigInteger> GAME_END_DENY() {
        final Function function = new Function(FUNC_GAME_END_DENY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint128>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> accountToGameIdToPerKeyHeight1e18(String param0, BigInteger param1) {
        final Function function = new Function(FUNC_ACCOUNTTOGAMEIDTOPERKEYHEIGHT1E18, 
                Arrays.<Type>asList(new Address(160, param0),
                new Uint256(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> accountToGameIdToRealizedBonus(String param0, BigInteger param1) {
        final Function function = new Function(FUNC_ACCOUNTTOGAMEIDTOREALIZEDBONUS, 
                Arrays.<Type>asList(new Address(160, param0),
                new Uint256(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> baseKeyPrice() {
        final Function function = new Function(FUNC_BASEKEYPRICE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> bidLand(BigInteger newBids) {
        final Function function = new Function(
                FUNC_BIDLAND, 
                Arrays.<Type>asList(new Uint256(newBids)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger>> bidRoundInfo() {
        final Function function = new Function(FUNC_BIDROUNDINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint96>() {}, new TypeReference<Uint128>() {}, new TypeReference<Uint96>() {}, new TypeReference<Uint32>() {}));
        return new RemoteFunctionCall<Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> buyKeyLimit(BigInteger gameId) {
        final Function function = new Function(FUNC_BUYKEYLIMIT, 
                Arrays.<Type>asList(new Uint256(gameId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> checkAndUpdateLastBidId() {
        final Function function = new Function(
                FUNC_CHECKANDUPDATELASTBIDID, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> claimBonus(List<BigInteger> gameIds, String player) {
        final Function function = new Function(
                FUNC_CLAIMBONUS, 
                Arrays.<Type>asList(new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(gameIds, Uint256.class)),
                new Address(160, player)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> convertKeyToToken(List<BigInteger> gameIds) {
        final Function function = new Function(
                FUNC_CONVERTKEYTOTOKEN, 
                Arrays.<Type>asList(new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(gameIds, Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> converterContract() {
        final Function function = new Function(FUNC_CONVERTERCONTRACT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> createGameDirectly(String nftAddress, BigInteger nftId, BigInteger startTimestamp) {
        final Function function = new Function(
                FUNC_CREATEGAMEDIRECTLY, 
                Arrays.<Type>asList(new Address(160, nftAddress),
                new Uint256(nftId),
                new Uint96(startTimestamp)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> depositBidToken(BigInteger amount) {
        final Function function = new Function(
                FUNC_DEPOSITBIDTOKEN, 
                Arrays.<Type>asList(new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> gameStartDeny() {
        final Function function = new Function(FUNC_GAMESTARTDENY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple9<BigInteger, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger, String>> games(BigInteger param0) {
        final Function function = new Function(FUNC_GAMES, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint96>() {}, new TypeReference<Address>() {}, new TypeReference<Uint96>() {}, new TypeReference<Address>() {}, new TypeReference<Uint96>() {}, new TypeReference<Address>() {}));
        return new RemoteFunctionCall<Tuple9<BigInteger, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger, String>>(function,
                new Callable<Tuple9<BigInteger, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger, String>>() {
                    @Override
                    public Tuple9<BigInteger, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple9<BigInteger, BigInteger, String, BigInteger, String, BigInteger, String, BigInteger, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (String) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue(), 
                                (String) results.get(8).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getBidState() {
        final Function function = new Function(FUNC_GETBIDSTATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>> getBidderInfoOf(String bidder) {
        final Function function = new Function(FUNC_GETBIDDERINFOOF, 
                Arrays.<Type>asList(new Address(160, bidder)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint128>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getBidsOf(String bidder) {
        final Function function = new Function(FUNC_GETBIDSOF, 
                Arrays.<Type>asList(new Address(160, bidder)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> getGameEndTimeCountDowns(List<BigInteger> gameIds) {
        final Function function = new Function(FUNC_GETGAMEENDTIMECOUNTDOWNS, 
                Arrays.<Type>asList(new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(gameIds, Uint256.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint128>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getGameEndTimestampOfGameIds(List<BigInteger> gameIds) {
        final Function function = new Function(FUNC_GETGAMEENDTIMESTAMPOFGAMEIDS, 
                Arrays.<Type>asList(new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(gameIds, Uint256.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getGameInfoOfGameIds(List<BigInteger> gameIds) {
        final Function function = new Function(FUNC_GETGAMEINFOOFGAMEIDS, 
                Arrays.<Type>asList(new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(gameIds, Uint256.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<GameInfo>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getGameStateOfGameIds(List<BigInteger> gameIds) {
        final Function function = new Function(FUNC_GETGAMESTATEOFGAMEIDS, 
                Arrays.<Type>asList(new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(gameIds, Uint256.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint8>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getKeyPrice(BigInteger givenSysTotalKeyMinted) {
        final Function function = new Function(FUNC_GETKEYPRICE, 
                Arrays.<Type>asList(new Uint256(givenSysTotalKeyMinted)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint96>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getNextRoundGameStartTimestamp() {
        final Function function = new Function(FUNC_GETNEXTROUNDGAMESTARTTIMESTAMP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint96>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple2<List<BigInteger>, List<BigInteger>>> getPlayerStateOfGameIds(String player, List<BigInteger> gameIds) {
        final Function function = new Function(FUNC_GETPLAYERSTATEOFGAMEIDS, 
                Arrays.<Type>asList(new Address(160, player),
                new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(gameIds, Uint256.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple2<List<BigInteger>, List<BigInteger>>>(function,
                new Callable<Tuple2<List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple2<List<BigInteger>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<BigInteger>, List<BigInteger>>(
                                convertToNative((List<Uint256>) results.get(0).getValue()), 
                                convertToNative((List<Uint256>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<byte[]> getRoleAdmin(byte[] role) {
        final Function function = new Function(FUNC_GETROLEADMIN, 
                Arrays.<Type>asList(new Bytes32(role)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<BigInteger> getTimeBasedCurrentBidId() {
        final Function function = new Function(FUNC_GETTIMEBASEDCURRENTBIDID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint128>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getWithdrawableTokenAmountOf(String bidder) {
        final Function function = new Function(FUNC_GETWITHDRAWABLETOKENAMOUNTOF, 
                Arrays.<Type>asList(new Address(160, bidder)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> grantRole(byte[] role, String account) {
        final Function function = new Function(
                FUNC_GRANTROLE, 
                Arrays.<Type>asList(new Bytes32(role),
                new Address(160, account)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> hasRole(byte[] role, String account) {
        final Function function = new Function(FUNC_HASROLE, 
                Arrays.<Type>asList(new Bytes32(role),
                new Address(160, account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isPaused() {
        final Function function = new Function(FUNC_ISPAUSED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> keepBidIdAndUpdateCycle(BigInteger newCycleLength) {
        final Function function = new Function(
                FUNC_KEEPBIDIDANDUPDATECYCLE, 
                Arrays.<Type>asList(new Uint96(newCycleLength)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> newGame(String nftAddress, BigInteger nftId) {
        final Function function = new Function(
                FUNC_NEWGAME, 
                Arrays.<Type>asList(new Address(160, nftAddress),
                new Uint256(nftId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> nftContractWhiteList(String param0) {
        final Function function = new Function(FUNC_NFTCONTRACTWHITELIST, 
                Arrays.<Type>asList(new Address(160, param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<byte[]> onERC721Received(String msgSender, String from, BigInteger tokenId, byte[] data) {
        final Function function = new Function(FUNC_ONERC721RECEIVED, 
                Arrays.<Type>asList(new Address(160, msgSender),
                new Address(160, from),
                new Uint256(tokenId),
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes4>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> purchaseKeyOfGameId(BigInteger gameId, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_PURCHASEKEYOFGAMEID, 
                Arrays.<Type>asList(new Uint256(gameId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceRole(byte[] role, String callerConfirmation) {
        final Function function = new Function(
                FUNC_RENOUNCEROLE, 
                Arrays.<Type>asList(new Bytes32(role),
                new Address(160, callerConfirmation)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> retrieveNft(BigInteger gameId) {
        final Function function = new Function(
                FUNC_RETRIEVENFT, 
                Arrays.<Type>asList(new Uint256(gameId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeRole(byte[] role, String account) {
        final Function function = new Function(
                FUNC_REVOKEROLE, 
                Arrays.<Type>asList(new Bytes32(role),
                new Address(160, account)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setBias(BigInteger newBias) {
        final Function function = new Function(
                FUNC_SETBIAS, 
                Arrays.<Type>asList(new Uint256(newBias)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setGameStartDeny(BigInteger newDeny) {
        final Function function = new Function(
                FUNC_SETGAMESTARTDENY, 
                Arrays.<Type>asList(new Uint256(newDeny)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setPaused(Boolean newIsPaused) {
        final Function function = new Function(
                FUNC_SETPAUSED, 
                Arrays.<Type>asList(new Bool(newIsPaused)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setWL(List<String> nftContractAddress, Boolean inWhiteList) {
        final Function function = new Function(
                FUNC_SETWL, 
                Arrays.<Type>asList(new DynamicArray<Address>(
                        Address.class,
                        org.web3j.abi.Utils.typeMap(nftContractAddress, Address.class)),
                new Bool(inWhiteList)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final Function function = new Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new Bytes4(interfaceId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> switchWL(Boolean turnOnWL) {
        final Function function = new Function(
                FUNC_SWITCHWL, 
                Arrays.<Type>asList(new Bool(turnOnWL)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> sysTokenContract() {
        final Function function = new Function(FUNC_SYSTOKENCONTRACT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> sysTotalKeyMinted() {
        final Function function = new Function(FUNC_SYSTOTALKEYMINTED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalGames() {
        final Function function = new Function(FUNC_TOTALGAMES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalKeyMintedBias() {
        final Function function = new Function(FUNC_TOTALKEYMINTEDBIAS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> updateBidStartTimePoint(BigInteger newBidStartTimePoint) {
        final Function function = new Function(
                FUNC_UPDATEBIDSTARTTIMEPOINT, 
                Arrays.<Type>asList(new Uint96(newBidStartTimePoint)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateConverter(String newConverterAddress) {
        final Function function = new Function(
                FUNC_UPDATECONVERTER, 
                Arrays.<Type>asList(new Address(160, newConverterAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateVault(String newVaultAddress) {
        final Function function = new Function(
                FUNC_UPDATEVAULT, 
                Arrays.<Type>asList(new Address(160, newVaultAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> useNftContractWhiteList() {
        final Function function = new Function(FUNC_USENFTCONTRACTWHITELIST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> vaultContract() {
        final Function function = new Function(FUNC_VAULTCONTRACT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawBidToken(BigInteger amount) {
        final Function function = new Function(
                FUNC_WITHDRAWBIDTOKEN, 
                Arrays.<Type>asList(new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawLastplayerPrize(List<BigInteger> gameIds) {
        final Function function = new Function(
                FUNC_WITHDRAWLASTPLAYERPRIZE, 
                Arrays.<Type>asList(new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(gameIds, Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawSaleRevenue(List<BigInteger> gameIds) {
        final Function function = new Function(
                FUNC_WITHDRAWSALEREVENUE, 
                Arrays.<Type>asList(new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(gameIds, Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static BidFroopyLand load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new BidFroopyLand(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static BidFroopyLand load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new BidFroopyLand(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static BidFroopyLand load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new BidFroopyLand(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static BidFroopyLand load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new BidFroopyLand(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<BidFroopyLand> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String sysTokenAddress, String vaultAddress, BigInteger cycleLength, BigInteger timeRatioBasedOnCycle, BigInteger bidStartTimePoint) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(160, sysTokenAddress),
                new Address(160, vaultAddress),
                new Uint96(cycleLength),
                new Uint32(timeRatioBasedOnCycle),
                new Uint96(bidStartTimePoint)));
        return deployRemoteCall(BidFroopyLand.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    public static RemoteCall<BidFroopyLand> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String sysTokenAddress, String vaultAddress, BigInteger cycleLength, BigInteger timeRatioBasedOnCycle, BigInteger bidStartTimePoint) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(160, sysTokenAddress),
                new Address(160, vaultAddress),
                new Uint96(cycleLength),
                new Uint32(timeRatioBasedOnCycle),
                new Uint96(bidStartTimePoint)));
        return deployRemoteCall(BidFroopyLand.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<BidFroopyLand> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String sysTokenAddress, String vaultAddress, BigInteger cycleLength, BigInteger timeRatioBasedOnCycle, BigInteger bidStartTimePoint) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(160, sysTokenAddress),
                new Address(160, vaultAddress),
                new Uint96(cycleLength),
                new Uint32(timeRatioBasedOnCycle),
                new Uint96(bidStartTimePoint)));
        return deployRemoteCall(BidFroopyLand.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<BidFroopyLand> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String sysTokenAddress, String vaultAddress, BigInteger cycleLength, BigInteger timeRatioBasedOnCycle, BigInteger bidStartTimePoint) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(160, sysTokenAddress),
                new Address(160, vaultAddress),
                new Uint96(cycleLength),
                new Uint32(timeRatioBasedOnCycle),
                new Uint96(bidStartTimePoint)));
        return deployRemoteCall(BidFroopyLand.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    public static void linkLibraries(List<LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    public static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class GameInfo extends StaticStruct {
        public BigInteger state;

        public String nftAddress;

        public BigInteger nftId;

        public String principal;

        public BigInteger startTimestamp;

        public BigInteger endTimestamp;

        public BigInteger keyPrice;

        public BigInteger totalKeyMinted;

        public BigInteger salesRevenue;

        public String mostKeyHolder;

        public String lastPlayer;

        public GameInfo(BigInteger state, String nftAddress, BigInteger nftId, String principal, BigInteger startTimestamp, BigInteger endTimestamp, BigInteger keyPrice, BigInteger totalKeyMinted, BigInteger salesRevenue, String mostKeyHolder, String lastPlayer) {
            super(new Uint8(state),
                    new Address(160, nftAddress),
                    new Uint256(nftId),
                    new Address(160, principal),
                    new Uint128(startTimestamp),
                    new Uint128(endTimestamp),
                    new Uint128(keyPrice),
                    new Uint96(totalKeyMinted),
                    new Uint256(salesRevenue),
                    new Address(160, mostKeyHolder),
                    new Address(160, lastPlayer));
            this.state = state;
            this.nftAddress = nftAddress;
            this.nftId = nftId;
            this.principal = principal;
            this.startTimestamp = startTimestamp;
            this.endTimestamp = endTimestamp;
            this.keyPrice = keyPrice;
            this.totalKeyMinted = totalKeyMinted;
            this.salesRevenue = salesRevenue;
            this.mostKeyHolder = mostKeyHolder;
            this.lastPlayer = lastPlayer;
        }

        public GameInfo(Uint8 state, Address nftAddress, Uint256 nftId, Address principal, Uint128 startTimestamp, Uint128 endTimestamp, Uint128 keyPrice, Uint96 totalKeyMinted, Uint256 salesRevenue, Address mostKeyHolder, Address lastPlayer) {
            super(state, nftAddress, nftId, principal, startTimestamp, endTimestamp, keyPrice, totalKeyMinted, salesRevenue, mostKeyHolder, lastPlayer);
            this.state = state.getValue();
            this.nftAddress = nftAddress.getValue();
            this.nftId = nftId.getValue();
            this.principal = principal.getValue();
            this.startTimestamp = startTimestamp.getValue();
            this.endTimestamp = endTimestamp.getValue();
            this.keyPrice = keyPrice.getValue();
            this.totalKeyMinted = totalKeyMinted.getValue();
            this.salesRevenue = salesRevenue.getValue();
            this.mostKeyHolder = mostKeyHolder.getValue();
            this.lastPlayer = lastPlayer.getValue();
        }
    }

    public static class ClaimKeyBonusEventResponse extends BaseEventResponse {
        public BigInteger GameId;

        public String Player;

        public BigInteger bonusAmount;
    }

    public static class GameCreatedEventResponse extends BaseEventResponse {
        public String NftPrincipal;

        public String NftAddress;

        public BigInteger gameId;

        public BigInteger nftId;
    }

    public static class GameJoinedEventResponse extends BaseEventResponse {
        public BigInteger GameId;

        public String Player;

        public BigInteger _keyAmount;
    }

    public static class NewBidsEventResponse extends BaseEventResponse {
        public String Bidder;

        public BigInteger amount;

        public BigInteger bidId;
    }

    public static class NftRetrievedEventResponse extends BaseEventResponse {
        public String RetrieveAddress;

        public BigInteger gameId;
    }

    public static class RoleAdminChangedEventResponse extends BaseEventResponse {
        public byte[] role;

        public byte[] previousAdminRole;

        public byte[] newAdminRole;
    }

    public static class RoleGrantedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class RoleRevokedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class SettleBidsEventResponse extends BaseEventResponse {
        public String BidWinner;

        public BigInteger amount;

        public BigInteger bidId;
    }

    public static class WithdrawLastPlayerPrizeEventResponse extends BaseEventResponse {
        public String Winner;

        public BigInteger gameId;

        public BigInteger prize;
    }

    public static class WithdrawSaleRevenueEventResponse extends BaseEventResponse {
        public String Principal;

        public BigInteger gameId;

        public BigInteger pureSalesRevenue;
    }
}
